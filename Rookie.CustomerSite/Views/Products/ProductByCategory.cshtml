@using Rookie.CustomerSite.ViewModel
@using Rookie.CustomerSite.ViewModel.Product

@model PagedResponseVM<ProductVm>
@addTagHelper *, Microsoft.AspNetCore.Mvc.TagHelpers

@{
    ViewData["Title"] = "RookieShop";
    Layout = "_Layout";
}

<div class="container">
    <div class="row">
        <div class="col-lg-12">
            @if (Model.Items.Count() == 0)
            {
                <nav aria-label="breadcrumb">
                    <ol class="breadcrumb">
                        <li class="breadcrumb-item">
                            <a asp-controller="Home" asp-action="Index">Home</a>
                        </li>
                        <li class="breadcrumb-item">
                            Product Not Found
                        </li>
                    </ol>
                </nav>
            }

            else if (ViewBag.Search != null)
            {
                <nav aria-label="breadcrumb">
                    <ol class="breadcrumb">
                        <li class="breadcrumb-item">
                            <a asp-controller="Home" asp-action="Index">Home</a>
                        </li>
                        <li class="breadcrumb-item">
                            Search = "@ViewBag.Search"
                        </li>
                    </ol>
                </nav>
            }

            else
            {
                <nav aria-label="breadcrumb">
                    <ol class="breadcrumb">
                        <li class="breadcrumb-item">
                            <a asp-controller="Home" asp-action="Index">Home</a>
                        </li>
                        <li class="breadcrumb-item">
                            @Model.Items.FirstOrDefault().ProductModel.SubCategory.Category.Name
                        </li>
                        <li class="breadcrumb-item">
                            <a asp-controller="Products" 
                               asp-action="ProductByCategory"
                               asp-route-subCategoryId="@Model.Items.FirstOrDefault().ProductModel.SubCategoryId">
                                @Model.Items.FirstOrDefault().ProductModel.SubCategory.Name
                            </a>
                        </li>
                    </ol>
                </nav>
            }
        </div>
        <!-- breadcrumb-->
        <!--*** MENUS AND FILTERS ***-->
        <div class="col-lg-3">
            @await Component.InvokeAsync("CategorySidebar", ViewBag.Search)
        </div>
        <!-- *** MENUS AND FILTERS END ***-->

        @if (Model.Items.Count() == 0)
        {
            <partial name="_ProductNotFound" />
        }
        else
        {
            <div class="col-lg-9">
                <div class="box info-bar">
                    <div class="row">
                        <div class="col-md-12 col-lg-4 products-showing">
                            @{
                                var showing = (Model.Items.Count() > 9) ?
                                    $"Showing <strong>9</strong> of <strong> {Model.Items.Count()}</strong> products" :
                                    $"Showing <strong>{Model.Items.Count()}</strong> products";
                                @Html.Raw(showing);
                            }
                        </div>
                    </div>
                </div>

                @await Component.InvokeAsync("ListProduct", Model)

                @{
                    Model.Search = ViewBag.Search;
                    @await Component.InvokeAsync("Pagination", Model)
                }
            </div>
            <!-- /.col-lg-9-->
        }
    </div>
</div>
